
/**
 * # Task #2? (C++/Java)
 *
 * Write a console application which has N producers (N=1…10),
 * M consumers (M=1…10) and one data queue.
 *
 * Each producer and consumer is a separate thread and all
 * threads are working concurrently.
 *
 * Producer thread sleeps 0…100 milliseconds randomly then it
 * wakes up and generates a random number between 1 and 100
 * and then puts this number into the data queue.
 *
 * Consumer thread sleeps 0…100 milliseconds randomly and then
 * wakes up and takes the number from the queue and saves it
 * to the output ‘data.txt’ file.
 *
 * All numbers are appended in the file and all they are comma
 * delimited (for example 4,67,99,23,…).
 *
 * When a producer thread puts the next number to the data queue,
 * it checks the size of the data queue, and if it is >=100 the
 * producer thread is blocked until the number of elements
 * gets <= 80.
 *
 * When a consumer thread wants to take the next number from the
 * data queue and there are no elements in it, the consumer thread
 * is blocked until a new element is added to the data queue by
 * a producer.
 *
 *
 * When we start the application we need to insert the N (number
 * of producers) and the M (number of consumers) after which the
 * program starts all threads.
 *
 * It should print the current number of elements of the data
 * queue every second.
 *
 * When we stop the program, it should interrupt all producers and
 * wait for all consumers to save all queued data then program exits.
 */

package procons;

import java.io.Console;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * Created by abadalian on 3/31/16.
 */
public class Main {
    //
    public static void main( String[] args )
    {
        // read number of producers and consumers
        // from command line
        Console syscons = System.console();

		System.out.print("Number of producers (1..10):\n? ");
        String en = syscons.readLine();
        int N = Integer.parseInt(en);
		if( 0 > N || N > 11 ) {
			System.err.printf("%d is not in [1..10]\n", N);
			System.exit(1);
		}

		System.out.print("Number of consumers (1..10):\n? ");
        String em = syscons.readLine();
        int M = Integer.parseInt(em);
		if( 0 > M || M > 11 ) {
			System.err.printf("%d is not in [1..10]\n", M);
			System.exit(2);
		}

		System.out.printf("%d producers and %d consumers.\n", N, M);


        // file for output
        PrintWriter output = null;
        try {
            output = new PrintWriter("data.txt");
        }
        catch( FileNotFoundException ex ) {
            System.exit(1);
        }

        // data buffer
        DataQueue buffer = new DataQueue();

		// status reporter
        Reporter reporter = new Reporter(buffer);
        reporter.start();

		// producers
        ExecutorService prods = Executors.newFixedThreadPool(N);
        for( int i = 0; i < N; ++i )
            prods.execute(new Producer(buffer));

		// consumers
        ExecutorService conss = Executors.newFixedThreadPool(M);
        for( int i = 0; i < M; ++i )
            conss.execute(new Consumer(buffer, output));


        // shutdown handler
        final PrintWriter eOutput = output;
        Thread sdh = new Thread() {
            @Override
            public void run()
            {
                prods.shutdownNow();

                while( buffer.getCount() != 0 ) {
                    try {
                        Thread.sleep(100);
                    }
                    catch( InterruptedException e ) {
                        e.printStackTrace();
                    }
                }
                conss.shutdownNow();

                reporter.interrupt();
                eOutput.close();
            }
        };
        Runtime.getRuntime().addShutdownHook(sdh);
    }
}
